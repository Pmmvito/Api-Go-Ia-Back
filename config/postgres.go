package config

import (
	"os"

	"github.com/Pmmvito/Golang-Api-Exemple/schemas"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

// InitializePostgreSQL conecta ao banco de dados PostgreSQL, realiza a auto-migra√ß√£o para os schemas,
// e cria categorias padr√£o se elas n√£o existirem. Retorna uma inst√¢ncia de DB GORM ou um erro.
func InitializePostgreSQL() (*gorm.DB, error) {
	logger := GetLogger("postgres")

	// Carrega a DSN da vari√°vel de ambiente
	dsn := os.Getenv("DATABASE_DSN")
	if dsn == "" {
		logger.ErrorF("Vari√°vel de ambiente DATABASE_DSN n√£o definida")
		return nil, nil // Ou retorne um erro apropriado
	}

	// Conecta ao banco de dados
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		logger.ErrorF("Erro ao conectar com o PostgreSQL: %v", err)
		return nil, err
	}

	// Migra o schema (ordem importa por causa das FKs)
	err = db.AutoMigrate(
		&schemas.User{},         // 1. Usu√°rios (independente)
		&schemas.Category{},     // 2. Categorias (independente)
		&schemas.Product{},      // 3. Produtos (depende de Category)
		&schemas.Receipt{},      // 4. Notas fiscais (depende de User)
		&schemas.ReceiptItem{},  // 5. Itens de nota (depende de Receipt e Product)
		&schemas.ShoppingList{}, // 6. Listas de compras (depende de User)
		&schemas.ListItem{},     // 7. Itens de lista (depende de ShoppingList e Product)
	)
	if err != nil {
		logger.ErrorF("Erro na automigra√ß√£o do PostgreSQL: %v", err)
		return nil, err
	}

	// Cria categorias padr√£o se n√£o existirem
	createDefaultCategories(db, logger)

	logger.Info("Conex√£o com o PostgreSQL estabelecida e migra√ß√£o bem-sucedida.")
	return db, nil
}

// createDefaultCategories verifica a exist√™ncia de categorias padr√£o no banco de dados
// e as cria se n√£o estiverem presentes. Isso garante que a aplica√ß√£o tenha um conjunto base de categorias para trabalhar.
func createDefaultCategories(db *gorm.DB, logger *Logger) {
	// Categorias padr√£o simplificadas e n√£o redundantes para evitar confus√£o na IA
	defaultCategories := []schemas.Category{
		{Name: "Gr√£os e Cereais", Description: "Arroz, feij√£o, aveia, cereais", Icon: "üåæ", Color: "#F4A261"},
		{Name: "Massas e Padaria", Description: "Macarr√£o, p√£es, bolos e produtos de padaria", Icon: "ÔøΩ", Color: "#E9C46A"},
		{Name: "Pantry e Ingredientes", Description: "√ìleos, enlatados, condimentos, farinhas e fermentos", Icon: "ÔøΩ", Color: "#D4A574"},
		{Name: "Prote√≠nas", Description: "Carnes, aves, peixes, ovos e frios", Icon: "ÔøΩ", Color: "#E74C3C"},
		{Name: "Latic√≠nios", Description: "Leite, queijos, iogurtes, manteiga", Icon: "üßÄ", Color: "#F1C40F"},
		{Name: "Hortifruti", Description: "Frutas e vegetais frescos", Icon: "ü•¨", Color: "#27AE60"},
		{Name: "Bebidas", Description: "√Ågua, sucos, refrigerantes, caf√©s, ch√°s e bebidas alco√≥licas", Icon: "‚òï", Color: "#3498DB"},
		{Name: "Congelados e Frios", Description: "Produtos congelados e sorvetes", Icon: "üßä", Color: "#81ECEC"},
		{Name: "Snacks e Doces", Description: "Chocolates, doces, salgadinhos e sobremesas", Icon: "üç´", Color: "#FF7675"},
		{Name: "Higiene e Cuidados Pessoais", Description: "Produtos de higiene pessoal e cuidados", Icon: "üßº", Color: "#A29BFE"},
		{Name: "Limpeza e Utilidades", Description: "Produtos de limpeza, lavanderia e descart√°veis", Icon: "üß∫", Color: "#0984E3"},
		{Name: "Beb√™ e Infantil", Description: "Fraldas, papinhas e produtos infantis", Icon: "ÔøΩ", Color: "#FFA07A"},
		{Name: "Pet", Description: "Ra√ß√£o e itens para animais de estima√ß√£o", Icon: "ÔøΩ", Color: "#FF6348"},
		{Name: "Outros", Description: "Itens diversos n√£o categorizados", Icon: "üì¶", Color: "#B2BEC3"},
	}

	for _, category := range defaultCategories {
		var exists schemas.Category
		if err := db.Where("name = ?", category.Name).First(&exists).Error; err != nil {
			// Categoria n√£o existe, cria
			if err := db.Create(&category).Error; err != nil {
				logger.WarnF("Erro ao criar categoria padr√£o '%s': %v", category.Name, err)
			} else {
				logger.InfoF("Categoria padr√£o criada: %s", category.Name)
			}
		}
	}
}
